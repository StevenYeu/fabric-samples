/*
Copyright IBM Corp. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/
package chaincode_test

import (
	"crypto/sha1"
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	"os"
	"strings"
	"testing"

	"github.com/hyperledger/fabric-chaincode-go/pkg/cid"
	"github.com/hyperledger/fabric-chaincode-go/shim"
	"github.com/hyperledger/fabric-contract-api-go/contractapi"
	"github.com/hyperledger/fabric-samples/asset-transfer-private-data/chaincode-go/chaincode"
	"github.com/hyperledger/fabric-samples/asset-transfer-private-data/chaincode-go/chaincode/mocks"
	"github.com/stretchr/testify/require"
)

/*
These unit tests use mocks to simulate chaincode-api & fabric interactions
The mocks are generated using counterfeiter directives in the comments (starting with "go:generate counterfeiter")
All files in mocks/* are generated by running following, in the directory with your directive:
	`go generate`
*/

//go:generate counterfeiter -o mocks/transaction.go -fake-name TransactionContext . transactionContext
type transactionContext interface {
	contractapi.TransactionContextInterface
}

//go:generate counterfeiter -o mocks/chaincodestub.go -fake-name ChaincodeStub . chaincodeStub
type chaincodeStub interface {
	shim.ChaincodeStubInterface
}

//go:generate counterfeiter -o mocks/statequeryiterator.go -fake-name StateQueryIterator . stateQueryIterator
type stateQueryIterator interface {
	shim.StateQueryIteratorInterface
}

//go:generate counterfeiter -o mocks/clientIdentity.go -fake-name ClientIdentity . clientIdentity
type clientIdentity interface {
	cid.ClientIdentity
}

type transientSchemaInput struct {
	JsonSchemaContent map[string]interface{} `json:"JsonSchemaContent"`
	SchemaId          string                 `json:"SchemaId"`
	Project           string                 `json:"Project"`
}

type transientUserInput struct {
	UUID        string `json:"UUID"`
	APIUserId   string `json:"APIUserId"`
	GroupName   string `json:"GroupName"`
	ProjectName string `json:"ProjectName"`
	Org         string `json:"Org"`
}

const assetCollectionName = "assetCollection"
const transferAgreementObjectType = "transferAgreement"
const myOrg1Msp = "Org1Testmsp"
const myOrg1Clientid = "myOrg1Userid"
const myOrg1PrivCollection = "Org1TestmspPrivateCollection"
const myOrg2Msp = "Org2Testmsp"
const myOrg2Clientid = "myOrg2Userid"
const myOrg2PrivCollection = "Org2TestmspPrivateCollection"

func TestReadSchemaFromPDCSuccess(t *testing.T) {
	transactionContext, chaincodeStub := prepMocksAsOrg1()
	contract := chaincode.SmartContract{}
	expectedSchema := chaincode.Schema{JsonSchemaContent: map[string]interface{}{
		"type": "object",
		"properties": struct {
			name string
		}{
			name: "test",
		},
		"additionalProperties": true,
		"require":              []string{"number"},
	}, SchemaId: "test1", Project: "testProject"}
	data, err := json.Marshal(expectedSchema)
	require.NoError(t, err)

	chaincodeStub.GetPrivateDataReturns(data, nil)

	got, err := contract.ReadSchemaFromPDC(transactionContext, "test1")
	require.NoError(t, err)

	require.Equal(t, expectedSchema.SchemaId, got.SchemaId)
}

func TestReadSchemaFromPDCSchemaNotFound(t *testing.T) {
	transactionContext, chaincodeStub := prepMocksAsOrg1()
	contract := chaincode.SmartContract{}

	chaincodeStub.GetPrivateDataReturns(nil, errors.New(""))

	_, err := contract.ReadSchemaFromPDC(transactionContext, "IDNotFound")
	if err == nil {
		t.Errorf("expected  error")
	}

}

func TestReadSchemaFromPDCInvalidClientIdentity(t *testing.T) {
	chaincodeStub := &mocks.ChaincodeStub{}
	transactionContext := &mocks.TransactionContext{}
	transactionContext.GetStubReturns(chaincodeStub)
	contract := chaincode.SmartContract{}

	chaincodeStub.GetPrivateDataReturns(nil, nil)

	_, err := contract.ReadSchemaFromPDC(transactionContext, "test1")

	if err == nil {
		t.Fatalf("expected error but got nil")
	}

	if !strings.Contains(err.Error(), "MSPID") {
		t.Errorf("wrong error message")
	}
}

func TestWriteSchemaToPDCSuccess(t *testing.T) {
	transactionContext, chaincodeStub := prepMocksAsOrg1()
	contract := chaincode.SmartContract{}

	testSchema := transientSchemaInput{
		JsonSchemaContent: map[string]interface{}{
			"type": "object",
			"properties": struct {
				name string
			}{
				name: "testInput",
			},
			"additionalProperties": true,
			"require":              []string{"name"},
		}, SchemaId: "writeTest1", Project: "testProject1",
	}
	expectedCollectionName := "_implicit_org_" + myOrg1Msp

	setReturnPropsInTransientMap(t, chaincodeStub, &testSchema)

	err := contract.WriteSchemaToPDC(transactionContext)

	require.NoError(t, err)

	calledCollection, calledId, calledAssetBytes := chaincodeStub.PutPrivateDataArgsForCall(0)

	require.Equal(t, expectedCollectionName, calledCollection)
	require.Equal(t, testSchema.SchemaId, calledId)

	assetBytes, _ := json.Marshal(testSchema)

	require.Equal(t, assetBytes, calledAssetBytes)

}

func TestWriteSchemaToPDCBadInput(t *testing.T) {
	transactionContext, chaincodeStub := prepMocksAsOrg2()
	contract := chaincode.SmartContract{}
	chaincodeStub.GetTransientReturns(nil, nil)

	err := contract.WriteSchemaToPDC(transactionContext)
	require.Error(t, err, "asset not found in the transient map input")

	assetPropMap := map[string][]byte{
		"asset_properties": []byte("bad input should return error"),
	}
	chaincodeStub.GetTransientReturns(assetPropMap, nil)
	err = contract.WriteSchemaToPDC(transactionContext)

	require.Contains(t, err.Error(), "failed to unmarshal JSON")

}
func TestWriteSchemaToPDCDuplicateSchema(t *testing.T) {
	transactionContext, chaincodeStub := prepMocksAsOrg1()
	contract := chaincode.SmartContract{}
	existingSchema := chaincode.Schema{JsonSchemaContent: map[string]interface{}{
		"type": "object",
		"properties": struct {
			name string
		}{
			name: "test",
		},
		"additionalProperties": true,
		"require":              []string{"name"},
	}, SchemaId: "original", Project: "testProject"}
	data, err := json.Marshal(existingSchema)
	require.NoError(t, err)

	chaincodeStub.GetPrivateDataReturns(data, nil)

	dupSchema := transientSchemaInput{
		JsonSchemaContent: map[string]interface{}{
			"type": "object",
			"properties": struct {
				name string
			}{
				name: "test",
			},
			"additionalProperties": true,
			"require":              []string{"name"},
		}, SchemaId: "original", Project: "testProject1",
	}

	setReturnPropsInTransientMap(t, chaincodeStub, &dupSchema)

	err = contract.WriteSchemaToPDC(transactionContext)

	require.Error(t, err)
	require.Contains(t, err.Error(), fmt.Sprintf("this Schema already exists: %s", existingSchema.SchemaId))
}

func TestWriteSchemaToPDCInvalidOrgs(t *testing.T) {
	chaincodeStub := &mocks.ChaincodeStub{}
	transactionContext := &mocks.TransactionContext{}
	transactionContext.GetStubReturns(chaincodeStub)
	clientIdentity := &mocks.ClientIdentity{}
	clientIdentity.GetMSPIDReturns(myOrg1Msp, nil)
	clientIdentity.GetIDReturns(myOrg1Clientid, nil)
	contract := chaincode.SmartContract{}

	os.Setenv("CORE_PEER_LOCALMSPID", myOrg2Msp)
	transactionContext.GetClientIdentityReturns(clientIdentity)

	testSchema := transientSchemaInput{
		JsonSchemaContent: map[string]interface{}{
			"type": "object",
			"properties": struct {
				name string
			}{
				name: "testInput",
			},
			"additionalProperties": true,
			"require":              []string{"name"},
		}, SchemaId: "writeTest1", Project: "testProject1",
	}

	setReturnPropsInTransientMap(t, chaincodeStub, &testSchema)

	err := contract.WriteSchemaToPDC(transactionContext)

	require.Error(t, err)
	require.Contains(t, err.Error(), fmt.Sprintf("client from org %v is not authorized to read or write private data from an org %v peer", myOrg1Msp, myOrg2Msp))
}

func TestNewUserSuccess(t *testing.T) {
	transactionContext, chaincodeStub := prepMocksAsOrg1()
	contract := chaincode.SmartContract{}

	testUserInput := transientUserInput{
		UUID:        "testuuid1",
		ProjectName: "testProj",
		APIUserId:   "testAPIUserID",
		Org:         myOrg1Msp,
	}
	expectedCollectionName := "_implicit_org_" + myOrg1Msp
	expectedUUID := createUUID(testUserInput.APIUserId, myOrg1Msp)
	setReturnPropsInTransientMap(t, chaincodeStub, &testUserInput)

	expectedProject := myOrg1Msp + "." + testUserInput.ProjectName

	expectedGroupID := expectedProject + "." + testUserInput.GroupName

	testGroup := chaincode.Group{
		GroupName: "testGroup",
		GID:       expectedGroupID,
		Project:   expectedProject,
		Org:       myOrg1PrivCollection,
		Users:     make([]chaincode.User, 0),
	}

	expectedUser := chaincode.User{
		UUID:      expectedUUID,
		APIUserId: testUserInput.APIUserId,
		Groups:    []string{expectedGroupID},
		Projects:  []string{expectedProject},
		Org:       myOrg1Msp,
	}

	expectedGroup := chaincode.Group{
		GroupName: "testGroup",
		GID:       expectedGroupID,
		Project:   expectedProject,
		Org:       myOrg1PrivCollection,
		Users:     []chaincode.User{expectedUser},
	}

	testGroupBytes, _ := json.Marshal(testGroup)
	expectedGroupBytes, _ := json.Marshal(expectedGroup)
	expectedUserBytes, _ := json.Marshal(expectedUser)

	chaincodeStub.GetPrivateDataReturnsOnCall(0, nil, nil)
	chaincodeStub.GetPrivateDataReturnsOnCall(1, testGroupBytes, nil)

	err := contract.NewUser(transactionContext)

	require.NoError(t, err)

	calledCollection, calledId, gotUserBytes := chaincodeStub.PutPrivateDataArgsForCall(0)

	require.Equal(t, expectedCollectionName, calledCollection)
	require.Equal(t, expectedUUID, calledId)

	require.Equal(t, expectedUserBytes, gotUserBytes)

	_, calledGroupID, gotGroupBytes := chaincodeStub.PutPrivateDataArgsForCall(1)

	require.Equal(t, expectedGroupID, calledGroupID)

	require.Equal(t, expectedGroupBytes, gotGroupBytes)

}

func TestNewUserBadInput(t *testing.T) {
	transactionContext, chaincodeStub := prepMocksAsOrg1()
	contract := chaincode.SmartContract{}
	chaincodeStub.GetTransientReturns(nil, errors.New(""))

	err := contract.NewUser(transactionContext)

	require.Error(t, err)
	require.Contains(t, err.Error(), "error getting transient:")

	assetPropMap := map[string][]byte{
		"asset_properties": []byte("bad input"),
	}
	chaincodeStub.GetTransientReturns(assetPropMap, nil)
	err = contract.NewUser(transactionContext)

	require.Error(t, err)
	require.Contains(t, err.Error(), "failed to unmarshal JSON")

}

func TestNewUserMissingInputFields(t *testing.T) {
	transactionContext, chaincodeStub := prepMocksAsOrg1()
	contract := chaincode.SmartContract{}
	type testInput struct {
		UUID        string `json:"UUID"`
		APIUserId   string `json:"APIUserId"`
		ProjectName string `json:"ProjectName"`
		Org         string `json:"Org"`
	}

	missingGroupInput := testInput{
		UUID:        "test",
		APIUserId:   "test1",
		ProjectName: "myproj",
		Org:         myOrg1Msp,
	}

	setReturnPropsInTransientMap(t, chaincodeStub, &missingGroupInput)

	err := contract.NewUser(transactionContext)

	require.Error(t, err)
	require.Contains(t, err.Error(), "failed to unmarshal JSON")
}

func TestNewUserDuplicate(t *testing.T) {
	transactionContext, chaincodeStub := prepMocksAsOrg1()
	contract := chaincode.SmartContract{}

	testUserInput := transientUserInput{
		UUID:        "testuuid1",
		ProjectName: "testProj",
		APIUserId:   "testAPIUserID",
		Org:         myOrg1Msp,
	}
	setReturnPropsInTransientMap(t, chaincodeStub, &testUserInput)

	testProjectID := myOrg1Msp + "." + testUserInput.ProjectName

	testGroupID := testProjectID + "." + testUserInput.GroupName
	testUUID := createUUID(testUserInput.APIUserId, myOrg1Msp)

	testUser := chaincode.User{
		UUID:      testUUID,
		APIUserId: testUserInput.APIUserId,
		Groups:    []string{testGroupID},
		Projects:  []string{testProjectID},
		Org:       myOrg1Msp,
	}

	testUserBytes, _ := json.Marshal(testUser)

	chaincodeStub.GetPrivateDataReturnsOnCall(0, testUserBytes, nil)

	err := contract.NewUser(transactionContext)

	gotPDC, gotUUID := chaincodeStub.GetPrivateDataArgsForCall(0)
	expectedPDC := "_implicit_org_" + myOrg1Msp

	require.Error(t, err)

	require.Equal(t, expectedPDC, gotPDC)
	require.Equal(t, testUUID, gotUUID)

}

func TestNewUserBadIdentity(t *testing.T) {
	chaincodeStub := &mocks.ChaincodeStub{}
	transactionContext := &mocks.TransactionContext{}
	transactionContext.GetStubReturns(chaincodeStub)
	clientIdentity := &mocks.ClientIdentity{}
	clientIdentity.GetMSPIDReturns(myOrg1Msp, nil)
	clientIdentity.GetIDReturns(myOrg1Clientid, nil)
	contract := chaincode.SmartContract{}

	os.Setenv("CORE_PEER_LOCALMSPID", myOrg2Msp)
	transactionContext.GetClientIdentityReturns(clientIdentity)

	testUserInput := transientUserInput{
		UUID:        "testuuid1",
		ProjectName: "testProj",
		APIUserId:   "testAPIUserID",
		Org:         myOrg1Msp,
	}
	setReturnPropsInTransientMap(t, chaincodeStub, &testUserInput)

	err := contract.NewUser(transactionContext)

	require.Error(t, err)
	require.Contains(t, err.Error(), "Creation of a New User cannot be performed:")
}

func prepMocksAsOrg1() (*mocks.TransactionContext, *mocks.ChaincodeStub) {
	return prepMocks(myOrg1Msp, myOrg1Clientid)
}
func prepMocksAsOrg2() (*mocks.TransactionContext, *mocks.ChaincodeStub) {
	return prepMocks(myOrg2Msp, myOrg2Clientid)
}
func prepMocks(orgMSP, clientId string) (*mocks.TransactionContext, *mocks.ChaincodeStub) {
	chaincodeStub := &mocks.ChaincodeStub{}
	transactionContext := &mocks.TransactionContext{}
	transactionContext.GetStubReturns(chaincodeStub)

	clientIdentity := &mocks.ClientIdentity{}
	clientIdentity.GetMSPIDReturns(orgMSP, nil)
	clientIdentity.GetIDReturns(clientId, nil)
	//set matching msp ID using peer shim env variable
	os.Setenv("CORE_PEER_LOCALMSPID", orgMSP)
	transactionContext.GetClientIdentityReturns(clientIdentity)
	return transactionContext, chaincodeStub
}

func setReturnPropsInTransientMap(t *testing.T, chaincodeStub *mocks.ChaincodeStub, testAsset interface{}) []byte {
	assetBytes := []byte{}
	if testAsset != nil {
		var err error
		assetBytes, err = json.Marshal(testAsset)
		require.NoError(t, err)
	}
	assetPropMap := map[string][]byte{
		"asset_properties": assetBytes,
	}
	chaincodeStub.GetTransientReturns(assetPropMap, nil)
	return assetBytes
}

func setReturnPrivateDataInStub(t *testing.T, chaincodeStub *mocks.ChaincodeStub, testAsset interface{}) []byte {
	if testAsset == nil {
		chaincodeStub.GetPrivateDataReturns(nil, nil)
		return nil
	} else {
		var err error
		assetBytes, err := json.Marshal(testAsset)
		require.NoError(t, err)
		chaincodeStub.GetPrivateDataReturns(assetBytes, nil)
		return assetBytes
	}
}

func createUUID(APIUserId string, org string) string {
	userID := org + "." + APIUserId

	h := sha1.New()
	h.Write([]byte(userID))
	return hex.EncodeToString(h.Sum(nil))
}
